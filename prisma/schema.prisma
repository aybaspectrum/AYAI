generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String             @id @default(cuid())
  name            String?
  email           String?            @unique
  emailVerified   DateTime?
  image           String?
  createdAt       DateTime           @default(now())
  onboardingCompleted Boolean         @default(false)
  consentGranted    Boolean         @default(false)

  careerEvents    CareerEvent[]
  portfolioVersions PortfolioVersion[]
  accounts        Account[]
  sessions        Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum CareerEventType {
  JOB
  PROJECT
  EDUCATION
  ACCOMPLISHMENT
}

model CareerEvent {
  id              String          @id @default(cuid())
  userId          String
  type            CareerEventType
  title           String
  organization    String
  description     String
  startDate       DateTime
  endDate         DateTime?
  
  user            User            @relation(fields: [userId], references: [id])
}

model PortfolioVersion {
  id              String          @id @default(cuid())
  userId          String
  name            String
  filterSettings  Json
  shareableUrlId  String          @unique @default(cuid())
  createdAt       DateTime        @default(now())

  user            User            @relation(fields: [userId], references: [id])
}

model InstaFolioTestData {
  id             String   @id @default(uuid())
  userId         String
  name           String   // User-defined name for this test data set

  // Section 1: Personal Info
  fullName       String
  tagline        String
  heroSubtitle   String
  aboutMe        String
  email          String
  linkedin       String
  phone          String?
  calendly       String?

  // Section 2: Toolkit Mix (Flexible)
  section2Label  String           // e.g., "Toolkit Mix"
  section2Vars   String[]         // e.g., ["Product", "Agile", "AI"]
  section2Vals   Int[]            // e.g., [25, 51, 24]

  // Section 3: Education (repeatable)
  educations     Education[]      @relation("TestDataEducations")

  // Section 4: Projects (repeatable)
  projects       Project[]        @relation("TestDataProjects")

  // Section 5: Experience (repeatable)
  experiences    Experience[]     @relation("TestDataExperiences")

  // Section 6: Skills (repeatable)
  skills         Skill[]          @relation("TestDataSkills")

  // Section 7: Footer & Social
  footerTagline  String
  socialLinks    String[]         // e.g., ["https://linkedin.com/in/...", "mailto:..."]

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Education {
  id             String   @id @default(uuid())
  testDataId     String
  year           String
  degree         String
  institution    String
  location       String
  skills         String[] // Keywords
  testData       InstaFolioTestData @relation(fields: [testDataId], references: [id], onDelete: Cascade, name: "TestDataEducations")
}

model Project {
  id             String   @id @default(uuid())
  testDataId     String
  year           String
  title          String
  description    String
  tags           String[]
  testData       InstaFolioTestData @relation(fields: [testDataId], references: [id], onDelete: Cascade, name: "TestDataProjects")
}

model Experience {
  id             String   @id @default(uuid())
  testDataId     String
  dateRange      String
  title          String
  company        String
  achievements   String[]
  testData       InstaFolioTestData @relation(fields: [testDataId], references: [id], onDelete: Cascade, name: "TestDataExperiences")
}

model Skill {
  id             String   @id @default(uuid())
  testDataId     String
  number         String
  title          String
  description    String
  testData       InstaFolioTestData @relation(fields: [testDataId], references: [id], onDelete: Cascade, name: "TestDataSkills")
}